AWSTemplateFormatVersion: "2010-09-09"
Description: A stack for deploying containerized applications in AWS Fargate. This stack runs containers in private subnets.
Parameters:
  OtelCollectorConfigSsmParameterName:
    Type: String
    Default: 'otel-collector-config'
    Description: Name of the SSM Parameter Store parameter to store the ADOT OTEL config file. Leave to the default.
    
  SNSNotificationsEmail:
    Description: "Email address for SNS notifications"
    Type: CommaDelimitedList

Mappings:
  # The VPC and subnet configuration is passed in via the environment spec.
  SubnetConfig:
    VPC:
      CIDR: "{{ environment.inputs.vpc_cidr }}"
    Public1:
      CIDR: "{{ environment.inputs.public_subnet_one_cidr }}"
    Public2:
      CIDR: "{{ environment.inputs.public_subnet_two_cidr }}"
    Public3:
      CIDR: "{{ environment.inputs.public_subnet_three_cidr }}"
    Private1:
      CIDR: "{{ environment.inputs.private_subnet_one_cidr }}"
    Private2:
      CIDR: "{{ environment.inputs.private_subnet_two_cidr }}"
    Private3:
      CIDR: "{{ environment.inputs.private_subnet_three_cidr }}"
    Rds1:
      CIDR: "{{ environment.inputs.rds_subnet_one_cidr }}"
    Rds2:
      CIDR: "{{ environment.inputs.rds_subnet_two_cidr }}"
    Rds3:
      CIDR: "{{ environment.inputs.rds_subnet_three_cidr }}"

  ElasticLoadBalancingRegionAccountMapForLogging:
    eu-west-1:
      AccountId: "156460612806"
    eu-west-2:
      AccountId: "652711504416"
    eu-west-3:
      AccountId: "009996457667"
    eu-south-1:
      AccountId: "635631232127"
    eu-central-1:
      AccountId: "054676820928"
    eu-north-1:
      AccountId: "897822967062"
    us-east-1:
      AccountId: "127311923021"

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !FindInMap ["SubnetConfig", "VPC", "CIDR"]
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: "VPC-Proton-{{ environment.name }}"

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !FindInMap ["SubnetConfig", "Public1", "CIDR"]
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: "AWS::Region" }
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "Proton-PublicSubnet1"
  PublicSubnet1RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
  PublicSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicSubnet1RouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet1DefaultRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn:
      - GatewayAttachement
  PublicSubnet1EIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc 
  PublicSubnet1NATGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt
        - PublicSubnet1EIP
        - AllocationId

  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !FindInMap ["SubnetConfig", "Public2", "CIDR"]
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: { Ref: "AWS::Region" }
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "Proton-PublicSubnet2"
  PublicSubnet2RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
  PublicSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicSubnet2RouteTable
      SubnetId: !Ref PublicSubnet2
  PublicSubnet2DefaultRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn:
      - GatewayAttachement
  PublicSubnet2EIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
  PublicSubnet2NATGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId: !Ref PublicSubnet2
      AllocationId: !GetAtt
        - PublicSubnet2EIP
        - AllocationId
  PublicSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !FindInMap ["SubnetConfig", "Public3", "CIDR"]
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: { Ref: "AWS::Region" }
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "Proton-PublicSubnet3"
  PublicSubnet3RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
  PublicSubnet3RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicSubnet3RouteTable
      SubnetId: !Ref PublicSubnet3
  PublicSubnet3DefaultRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicSubnet3RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn:
      - GatewayAttachement
  PublicSubnet3EIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
  PublicSubnet3NATGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId: !Ref PublicSubnet3
      AllocationId: !GetAtt
        - PublicSubnet3EIP
        - AllocationId

  RdsSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !FindInMap ["SubnetConfig", "Rds1", "CIDR"]
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: "AWS::Region" }
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "Proton-RDSSubnet1"
  RdsSubnet1RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
  RdsSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RdsSubnet1RouteTable
      SubnetId: !Ref RdsSubnet1

  RdsSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !FindInMap ["SubnetConfig", "Rds2", "CIDR"]
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: { Ref: "AWS::Region" }
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "Proton-RDSSubnet2"
  RdsSubnet2RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
  RdsSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RdsSubnet2RouteTable
      SubnetId: !Ref RdsSubnet2

  RdsSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !FindInMap ["SubnetConfig", "Rds3", "CIDR"]
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: { Ref: "AWS::Region" }
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "Proton-RDSSubnet3"
  RdsSubnet3RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
  RdsSubnet3RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RdsSubnet3RouteTable
      SubnetId: !Ref RdsSubnet3

  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !FindInMap ["SubnetConfig", "Private1", "CIDR"]
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: "AWS::Region" }
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "Proton-PrivateSubnet1"
  PrivateSubnet1RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
  PrivateSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet1DefaultRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PublicSubnet1NATGateway

  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !FindInMap ["SubnetConfig", "Private2", "CIDR"]
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: { Ref: "AWS::Region" }
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "Proton-PrivateSubnet2"
  PrivateSubnet2RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
  PrivateSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      SubnetId: !Ref PrivateSubnet2
  PrivateSubnet2DefaultRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PublicSubnet2NATGateway

  PrivateSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !FindInMap ["SubnetConfig", "Private3", "CIDR"]
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: { Ref: "AWS::Region" }
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "Proton-PrivateSubnet3"
  PrivateSubnet3RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
  PrivateSubnet3RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateSubnet3RouteTable
      SubnetId: !Ref PrivateSubnet3
  PrivateSubnet3DefaultRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateSubnet3RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PublicSubnet3NATGateway

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  RdsDBSubnetGroup: 
    Properties:
      DBSubnetGroupDescription: RDS subnet group
      SubnetIds: 
        - !Ref RdsSubnet1
        - !Ref RdsSubnet2
        - !Ref RdsSubnet3
    Type: "AWS::RDS::DBSubnetGroup"

  GatewayAttachement:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  CloudMapNamespace:
    Type: "AWS::ServiceDiscovery::PrivateDnsNamespace"
    Properties:
      Name: "{{ environment.name }}.local"
      Vpc: !Ref VPC

  Cluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: "{{ environment.inputs.ecs_cluster_container_insights }}"

  LoadBalancerLogsBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
            BucketKeyEnabled: true
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIntelligentTiering
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: INTELLIGENT_TIERING
      IntelligentTieringConfigurations:
        - Id: IntelligentTieringConfiguration
          Status: Enabled
          Tierings:
            - AccessTier: ARCHIVE_ACCESS
              Days: 180
            - AccessTier: DEEP_ARCHIVE_ACCESS
              Days: 730
      Tags:
        - Key: Name
          Value: 'LoadBalancerLogs'

  BucketPolicyForLoadBalancerLogsBucket:
    Type: AWS::S3::BucketPolicy
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Bucket: !Ref LoadBalancerLogsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:PutObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref LoadBalancerLogsBucket
                - /*
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !FindInMap [ ElasticLoadBalancingRegionAccountMapForLogging, !Ref 'AWS::Region', AccountId ]
                  - ':root'
          - Effect: Allow
            Action:
              - 's3:GetBucketAcl'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref LoadBalancerLogsBucket
            Principal:
              Service: 'logdelivery.elb.amazonaws.com'

  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: '{{ environment.inputs.loadbalancer_deletion_protection }}'
        - Key: access_logs.s3.enabled
          Value: 'true'
        - Key: access_logs.s3.bucket 
          Value: !Ref LoadBalancerLogsBucket
        - Key: access_logs.s3.prefix  
          Value: '{{ environment.name }}'
        - Key: idle_timeout.timeout_seconds  
          Value: 60
        - Key: routing.http.desync_mitigation_mode
          Value: 'defensive'
      Scheme: 'internet-facing'
    {% if environment.inputs.loadbalancer_type == 'application' %}
      SecurityGroups:
        - !GetAtt
          - LoadBalancerSecurityGroup
          - GroupId
    {% endif %}
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
    {% if environment.inputs.loadbalancer_type == 'application' %}
      Type: 'application'
    {% endif %}
      Tags:
        - Key: Name
          Value: "LB-{{ environment.name }}"

  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group for the Application Loadbalancer.
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId: !Ref VPC

  {% if environment.inputs.acm_certificate_arn|length > 0 %}
  LoadBalancerHttpListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  LoadBalancerHttpsListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      Certificates: 
        - CertificateArn: '{{ environment.inputs.acm_certificate_arn }}'
      DefaultActions:
        - Order: 10000
          Type: fixed-response
          FixedResponseConfig:
            ContentType: 'text/plain'
            MessageBody: 'Default endpoint, no content.'
            StatusCode: '200'
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: '{{ environment.inputs.loadbalancer_security_policy }}'
  {% else %}
  LoadBalancerHttpListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: fixed-response
          Order: 10001
          FixedResponseConfig:
            ContentType: 'text/plain'
            MessageBody: 'Default endpoint, no content.'
            StatusCode: '200'
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  {% endif %}

  ServiceTaskDefExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      Policies:
        - PolicyName: AWSOpenTelemetryPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:PutLogEvents"
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogStreams"
                  - "logs:DescribeLogGroups"
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                  - "xray:GetSamplingRules"
                  - "xray:GetSamplingTargets"
                  - "xray:GetSamplingStatisticSummaries"
                Resource: "*"
              - Effect: Allow
                Action:
                  - 'ssm:GetParameters'
                  - 'ssm:GetParameter'
                Resource: !Sub "arn:aws:ssm:*:*:parameter/${OtelCollectorConfigSsmParameterName}"

  pingSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${AWS::StackName}-ping"
      KmsMasterKeyId: "alias/aws/sns"

  pingSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    DependsOn: pingSNSTopic
    Properties:
      Topics:
        - !Ref pingSNSTopic
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Action:
              - sns:Subscribe
            Resource: !Ref pingSNSTopic
            Condition:
              StringEquals:
                "sns:Protocol": "sqs"

  PrometheusWorkSpace:
    Type: AWS::APS::Workspace
    Properties:
      Alias: "PrometheusWorkspace-{{ environment.name }}"
      Tags:
        - Key: Name
          Value: "PrometheusWorkspace-{{ environment.name }}"
          
  SNSTopicSubscriptionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.7
      Role: !GetAtt SNSTopicSubscriptionRole.Arn
      Handler: lambda_function.lambda_handler
      Code:
        ZipFile: |
          import json
          import logging
          import traceback
          import boto3
          def lambda_handler(event, context):
            sns_client = boto3.client('sns')
            print(event)
            print(context)
            resource_properties        = event['ResourceProperties']
            topic_arn                  = resource_properties['TopicArn']
            subscription_protocol      = resource_properties['SubscriptionProtocol']
            subscription_endpoints     = resource_properties['SubscriptionEndpoints']  
            if subscription_endpoints:
                for endpoint in subscription_endpoints:
                    response_data = sns_client.subscribe(
                        TopicArn=topic_arn,
                        Protocol=subscription_protocol,
                        Endpoint=endpoint,
                        ReturnSubscriptionArn=True
                    )
                    if response_data['ResponseMetadata']['HTTPStatusCode'] == 200: 
                       logger.info(
                           "Endpoint %s subscribed to topic %s.", endpoint, topic_arn)
                    else:
                        raise Exception(
                            "Failed when subscribing %s to topic %s.", endpoint, topic_arn)
      Description: Invoke a function during stack creation.

  SNSTopicSubscriptionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
        -
          PolicyName: root
          PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*'
                Sid: LogAccessPolicy
              - Action:
                  - sns:Unsubscribe
                  - sns:Subscribe
                Effect: Allow
                Resource: '*'
                Sid: SNSSubscription
            Version: '2012-10-17'

  SNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: !Sub "${AWS::StackName}-email"
      KmsMasterKeyId: "alias/aws/sns"
      
  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    DependsOn: SNSTopic
    Properties:
      Topics:
        - !Ref SNSTopic
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Action:
              - sns:Subscribe
            Resource: !Ref SNSTopic
            Condition:
              StringEquals:
                "sns:Protocol": "email"
      
  SNSTopicSubscription:
    Type: Custom::SNSSubscription
    Properties:
      ServiceToken: !GetAtt SNSTopicSubscriptionLambda.Arn
      TopicArn: !Ref SNSTopic
      SubscriptionEndpoints: !Ref SNSNotificationsEmail
      SubscriptionProtocol: 'email'

Outputs:
  Cluster:
    Description: The name of the ECS cluster
    Value: !Ref "Cluster"
  ClusterArn:
    Description: The ARN of the ECS cluster
    Value: !GetAtt "Cluster.Arn"
  ServiceTaskDefExecutionRoleArn:
    Description: The ARN of the ECS role
    Value: !GetAtt "ServiceTaskDefExecutionRole.Arn"
  SNSTopicArn:
    Description: The name of the SNS Topic
    Value: !Ref "pingSNSTopic"
  SNSTopicName:
    Description: TopicName of the SNS Topic
    Value: !GetAtt pingSNSTopic.TopicName
  SNSRegion:
    Description: Region of the SNS Topic
    Value: !Ref "AWS::Region"
  VPC:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref "VPC"
  PublicSubnet1:
    Description: Public subnet one
    Value: !Ref "PublicSubnet1"
  PublicSubnet2:
    Description: Public subnet two
    Value: !Ref "PublicSubnet2"
  PublicSubnet3:
    Description: Public subnet three
    Value: !Ref "PublicSubnet3"
  PrivateSubnet1:
    Description: Private subnet one
    Value: !Ref "PrivateSubnet1"
  PrivateSubnet2:
    Description: Private subnet two
    Value: !Ref "PrivateSubnet2"
  PrivateSubnet3:
    Description: Private subnet three
    Value: !Ref "PrivateSubnet3"
  RdsSubnet1:
    Description: Private subnet one
    Value: !Ref "RdsSubnet1"
  RdsSubnet2:
    Description: Private subnet two
    Value: !Ref "RdsSubnet2"
  RdsSubnet3:
    Description: Private subnet three
    Value: !Ref "RdsSubnet3"
  LoadBalancerArn:
    Description: LoadBalancerArn, to be imported in service template stacks for listener configurations.
    Value: !Ref LoadBalancer
  LoadBalancerSecurityGroupId:
    Description: LoadBalancerSecurityGroupId, to be imported in security group configurations in service template stacks.
    Value: !GetAtt LoadBalancerSecurityGroup.GroupId
  LoadBalancerHttpsListenerArn:
    Description: LoadBalancerHttpsListenerArn, to be imported in service template stacks for listener configurations.
    Value: !Ref LoadBalancerHttpsListener
  LoadBalancerHttpListenerArn:
    Description: LoadBalancerHttpsListenerArn, to be imported in service template stacks for listener configurations.
    Value: !Ref LoadBalancerHttpListener
  CloudMapNamespaceId:
    Description: CloudMap namespace Id
    Value: !GetAtt CloudMapNamespace.Id
  PrometheusWorkSpaceArn:
    Description: Prometheus workspace ARN
    Value: !GetAtt PrometheusWorkSpace.Arn
  PrometheusWorkSpaceRemoteWriteEndpoint:
    Description: Prometheus workspace remote_write endpoint
    Value:
      !Join [
        "",
        [!GetAtt PrometheusWorkSpace.PrometheusEndpoint, "api/v1/remote_write"],
      ]
  PrometheusWorkSpaceQueryEndpoint:
    Description: Prometheus workspace query endpoint
    Value:
      !Join [
        "",
        [!GetAtt PrometheusWorkSpace.PrometheusEndpoint, "api/v1/query"],
      ]
  OtelCollectorConfigSsmParameterName:
    Description: "Name of the SSM Parameter which contains the desired OpenTelemetry config for the AWS Distro for OpenTelemetry Collector. The parameter is manually created."
    Value: !Ref OtelCollectorConfigSsmParameterName
  SNSTopicArnEmail:
    Description: The name of the SNS Topic
    Value: !Ref "SNSTopic"
  SNSTopicNameEmail:
    Description: TopicName of the SNS Topic
    Value: !GetAtt SNSTopic.TopicName